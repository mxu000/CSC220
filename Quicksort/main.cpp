//Mingzhi Xu
#include <stdio.h>
#include <stdlib.h>
//generates random number to use as index of pivot
int randomindex(int k){ return(rand() % k); }
struct listnode { struct listnode * next;
    long              key; };
struct listnode *sort(struct listnode *a);

struct listnode *sort(struct listnode *a){//apply quick sort algorithm
    struct listnode *cursor = a;//uses a different pointer to go through list to determine length
    int length = 0;
    while(cursor != NULL){
        length++;
        cursor = cursor->next;
    }
    if(length > 1){//stop case for recur
        struct listnode *front, *pivot;//declaring pointers and initializing to its positions
        int index = randomindex(length), i;//index generated by random and i for for loop
        pivot = a;//point pivot to index
        for(i = 0; i < index; i++){ pivot = pivot->next; }
        front = a;//set front to first element of list
        //compare key to pivot and decide rather it goes into smaller or larger
        struct listnode *smaller, *larger, *smallpt, *largept, *temp;//have smaller and larger for list and use pointers to connect
        smaller = larger = smallpt = largept = temp = NULL;//reset
        while(front != NULL){
            if(front->key <= pivot->key){//key is less than or equal to pivot key
                if(smaller == NULL){//first element for smaller
                    smallpt = front;
                    smaller = smallpt;
                }
                else{
                    smallpt->next = front;
                    smallpt = smallpt->next;
                }
            }
            else{
                if(larger == NULL){//first element for larger
                    largept = front;
                    larger = largept;
                }
                else{
                    largept->next = front;
                    largept = largept->next;
                }
            }
            front = front->next;
        }
        if(smaller != NULL){ smallpt->next = NULL; }//end list for smaller
        if(larger != NULL){ largept->next = NULL; }//end list for larger
        smaller = sort(smaller);
        larger = sort(larger);
        a = temp = smaller;//reconnect list
        while(temp->next != NULL){ temp = temp->next; }
        temp->next = larger;
        }
    return a;
}
int main(void)
{
   long i;
   struct listnode *node, *tmpnode, *space;
   space =  (struct listnode *) malloc( 500000*sizeof(struct listnode));
   for( i=0; i< 500000; i++ ){
       (space + i)->key = 2*((17*i)%500000);
       (space + i)->next = space + (i+1);
   }
   (space+499999)->next = NULL;
   node = space;
   printf("\n prepared list, now starting sort\n");
   node = sort(node);
   printf("\n checking sorted list\n");
   for( i=0; i < 500000; i++){
        if( node == NULL ){ printf("List ended early\n"); exit(0); }
        if( node->key != 2*i ){ printf("Node contains wrong value\n"); exit(0); }
        node = node->next;
   }
   printf("Sort successful\n");
   exit(0);
}
